# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}


# --------------------
# Module configuration
# --------------------

#
# completion
#

# Set a custom path for the completion dump file.
# If none is provided, the default ${ZDOTDIR:-${HOME}}/.zcompdump is used.
#zstyle ':zim:completion' dumpfile "${ZDOTDIR:-${HOME}}/.zcompdump-${ZSH_VERSION}"

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=10'

# ------------------
# Initialize modules
# ------------------

# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi

if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  # Update static initialization script if it's outdated, before sourcing it
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys
zmodload -F zsh/terminfo +p:terminfo
if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
  bindkey ${terminfo[kcuu1]} history-substring-search-up
  bindkey ${terminfo[kcud1]} history-substring-search-down
fi

bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
# }}} End configuration added by Zim install

fpath=(~/.settings/zsh-completions/ $fpath)

#-----------
# Functions
#-----------
update() {
  pushd $HOME/.dotfiles &> /dev/null
  mr up
  popd &> /dev/null
  pushd $HOME &> /dev/null
  mr up
  popd &> /dev/null
}

source_if_exists() {
  [[ -z $1 ]] && return
  [[ -e $1 ]] && source $1
}

path_if_exists() {
  [[ -z $1 ]] && return
  [[ -e $1 ]] && export PATH="$1:${PATH}"
}

jobs_done() {
  if [[ $? == 0 ]]
  then
    paplay ~/Music/jobs-done.mp3
  else
    paplay ~/Music/oh-noo.mp3
  fi
}

work() {
  # work: open VS Code, optionally selecting a .code-workspace
  # Usage:
  #   work                -> open .code-workspace or new window
  #   work -w             -> /usr/bin/code -n (skip workspace search)
  #   work -- <args...>   -> pass extra args to /usr/bin/code
  #   work -w -- <args...>
  emulate -L zsh
  setopt localoptions

  # Split args on --
  local -a _rem _pass
  local _seen_dd=0
  for a in "$@"; do
    if (( _seen_dd )); then
      _pass+=("$a")
    elif [[ "$a" == -- ]]; then
      _seen_dd=1
    else
      _rem+=("$a")
    fi
  done

  # -w -> open new window, skip workspace search
  if [[ "${_rem[1]}" == "-w" ]]; then
    /usr/bin/code -n "${_pass[@]}"
    return $?
  fi

  # Any other args before -- are treated as paths/flags to code
  # This handles cases like `work .` to open the current directory
  if (( ${#_rem[@]} > 0 )); then
    /usr/bin/code -n "${_rem[@]}" "${_pass[@]}"
    return $?
  fi

  # Default behavior: find and open a workspace in current dir
  local -a _ws
  # Use nullglob (N) so no-match yields empty list
  _ws=( *.code-workspace(N) )

  if (( ${#_ws[@]} == 0 )); then
    # No workspace found, open new window
    /usr/bin/code -n "${_pass[@]}" .
    return $?
  fi

  local _sel=""
  if (( ${#_ws[@]} == 1 )); then
    _sel="${_ws[1]}"
  else
    if command -v fzf >/dev/null 2>&1; then
      _sel=$(printf '%s\n' "${_ws[@]}" | fzf --prompt="Select workspace> " --height=40% --reverse) || return 1
    else
      print "Select a workspace:"
      select _sel in "${_ws[@]}"; do
        [[ -n "$_sel" ]] && break
        print "Invalid selection."
      done
    fi
  fi

  /usr/bin/code -n "$_sel" "${_pass[@]}"
  return $?
}

#--------------------
# PATH configuration
#--------------------
## ~/Applications and ~/bin
path_if_exists ${HOME}/Applications
path_if_exists ${HOME}/bin
# Local PIP
path_if_exists ${HOME}/.local/bin
path_if_exists ${HOME}/.npm-global/bin
# Go
path_if_exists /usr/local/go/bin

#---------
# Aliases
#---------
alias cdl='cd; clear'
alias ckpt='git commit -a -m "checkpoint"; git push'
alias ping='prettyping --nolegend'
alias top='btop'
alias du='ncdu --color dark -rr -x --exclude .git --exclude node_modules'
alias dc='docker-compose'
alias dm='docker-machine'
alias d='docker'
alias v=vagrant
alias chmod='chmod -c'
alias chown='chown -c'
alias less='less -F'
alias task='go-task'

#-----------
# Utilities
#-----------
# Fuzzy find for ZSH
source_if_exists /usr/share/doc/fzf/examples/key-bindings.zsh
source_if_exists /usr/share/doc/fzf/examples/completion.zsh
source_if_exists /etc/profile.d/rvm.sh

# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

# Bat theme
export BAT_THEME="gruvbox-dark"

#----------------------------
# OS-specific configurations
#----------------------------
alias open='xdg-open'
alias ls='ls -F --color=auto'
if type batcat > /dev/null 2>&1; then
  alias cat='batcat'
fi
if type bat > /dev/null 2>&1; then
  alias cat='bat'
fi

# export LS_COLORS='no=00:fi=00:di=36:ln=35:pi=30;44:so=35;44:do=35;44:bd=33;44:cd=37;44:or=05;37;41:mi=05;37;41:ex=01;31:*.cmd=01;31:*.exe=01;31:*.com=01;31:*.bat=01;31:*.reg=01;31:*.app=01;31:*.txt=32:*.org=32:*.md=32:*.mkd=32:*.h=32:*.c=32:*.C=32:*.cc=32:*.cpp=32:*.cxx=32:*.objc=32:*.sh=32:*.csh=32:*.zsh=32:*.el=32:*.vim=32:*.java=32:*.pl=32:*.pm=32:*.py=32:*.rb=32:*.hs=32:*.php=32:*.htm=32:*.html=32:*.shtml=32:*.erb=32:*.haml=32:*.xml=32:*.rdf=32:*.css=32:*.sass=32:*.scss=32:*.less=32:*.js=32:*.coffee=32:*.man=32:*.0=32:*.1=32:*.2=32:*.3=32:*.4=32:*.5=32:*.6=32:*.7=32:*.8=32:*.9=32:*.l=32:*.n=32:*.p=32:*.pod=32:*.tex=32:*.go=32:*.bmp=33:*.cgm=33:*.dl=33:*.dvi=33:*.emf=33:*.eps=33:*.gif=33:*.jpeg=33:*.jpg=33:*.JPG=33:*.mng=33:*.pbm=33:*.pcx=33:*.pdf=33:*.pgm=33:*.png=33:*.PNG=33:*.ppm=33:*.pps=33:*.ppsx=33:*.ps=33:*.svg=33:*.svgz=33:*.tga=33:*.tif=33:*.tiff=33:*.xbm=33:*.xcf=33:*.xpm=33:*.xwd=33:*.xwd=33:*.yuv=33:*.aac=33:*.au=33:*.flac=33:*.m4a=33:*.mid=33:*.midi=33:*.mka=33:*.mp3=33:*.mpa=33:*.mpeg=33:*.mpg=33:*.ogg=33:*.ra=33:*.wav=33:*.anx=33:*.asf=33:*.avi=33:*.axv=33:*.flc=33:*.fli=33:*.flv=33:*.gl=33:*.m2v=33:*.m4v=33:*.mkv=33:*.mov=33:*.MOV=33:*.mp4=33:*.mp4v=33:*.mpeg=33:*.mpg=33:*.nuv=33:*.ogm=33:*.ogv=33:*.ogx=33:*.qt=33:*.rm=33:*.rmvb=33:*.swf=33:*.vob=33:*.webm=33:*.wmv=33:*.doc=31:*.docx=31:*.rtf=31:*.dot=31:*.dotx=31:*.xls=31:*.xlsx=31:*.ppt=31:*.pptx=31:*.fla=31:*.psd=31:*.7z=1;35:*.apk=1;35:*.arj=1;35:*.bin=1;35:*.bz=1;35:*.bz2=1;35:*.cab=1;35:*.deb=1;35:*.dmg=1;35:*.gem=1;35:*.gz=1;35:*.iso=1;35:*.jar=1;35:*.msi=1;35:*.rar=1;35:*.rpm=1;35:*.tar=1;35:*.tbz=1;35:*.tbz2=1;35:*.tgz=1;35:*.tx=1;35:*.war=1;35:*.xpi=1;35:*.xz=1;35:*.z=1;35:*.Z=1;35:*.zip=1;35:*.ANSI-30-black=30:*.ANSI-01;30-brblack=01;30:*.ANSI-31-red=31:*.ANSI-01;31-brred=01;31:*.ANSI-32-green=32:*.ANSI-01;32-brgreen=01;32:*.ANSI-33-yellow=33:*.ANSI-01;33-bryellow=01;33:*.ANSI-34-blue=34:*.ANSI-01;34-brblue=01;34:*.ANSI-35-magenta=35:*.ANSI-01;35-brmagenta=01;35:*.ANSI-36-cyan=36:*.ANSI-01;36-brcyan=01;36:*.ANSI-37-white=37:*.ANSI-01;37-brwhite=01;37:*.log=01;34:*~=01;34:*#=01;34:*.bak=01;36:*.BAK=01;36:*.old=01;36:*.OLD=01;36:*.org_archive=01;36:*.off=01;36:*.OFF=01;36:*.dist=01;36:*.DIST=01;36:*.orig=01;36:*.ORIG=01;36:*.swp=01;36:*.swo=01;36:*,v=01;36:*.gpg=34:*.gpg=34:*.pgp=34:*.asc=34:*.3des=34:*.aes=34:*.enc=34:*.sqlite=34:'
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
export LSCOLORS=${LS_COLORS}

source_if_exists /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

if [[ -e /etc/profile.d/apps-bin-path.sh ]]; then
  emulate sh -c 'source /etc/profile.d/apps-bin-path.sh'
fi

export EDITOR=vim
export VISUAL=vim

# Load any SSH keys into ssh-agent
#ssh-add -qk

unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null
gpgconf --launch gpg-agent

# golang stuff
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# Debian packaging variables
export DEBFULLNAME="Tom Moyer"
export DEBEMAIL="tommoyer@gmail.com"

export ALIEN_SECTION_PATH_COMPONENTS=2
export ALIEN_THEME="gruvbox"
export ALIEN_SECTION_USER_HOST=1

export ALIEN_SECTIONS_LEFT=(
  exit
  battery
  user
  path
  vcs_branch
  vcs_status
  vcs_dirty
  newline
  ssh
  venv
  prompt
)

export ALIEN_SECTIONS_RIGHT=(
  time
)

source ${HOME}/.alien/alien.zsh

# Pull in bash completions
autoload -U +X bashcompinit && bashcompinit

source_if_exists $HOME/.zsh-bash-completions-fallback/zsh-bash-completions-fallback.plugin.zsh

fpath=(~/.config/zsh-completions $fpath)

if [[ -e /home/linuxbrew/.linuxbrew/bin/brew ]]
then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

export GITHUB_USER="tommoyer"

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

eval "$(pyenv virtualenv-init -)"

eval "$(direnv hook zsh)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/tom-tom/.dotfiles/apps/Applications/google-cloud-sdk/path.zsh.inc' ]; then . '/home/tom-tom/.dotfiles/apps/Applications/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/tom-tom/.dotfiles/apps/Applications/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/tom-tom/.dotfiles/apps/Applications/google-cloud-sdk/completion.zsh.inc'; fi

#--------------------------------
# system-specific customizations
#--------------------------------
source_if_exists ~/.local_profile


